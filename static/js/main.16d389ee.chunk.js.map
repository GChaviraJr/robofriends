{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.16d389ee.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) => {\n    const {name, email, id} = props\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    return ( \n        <div> \n            {\n            robots.map((user, i) => {\n                return ( \n                  <Card key = {i}\n                    id = {robots[i].id}\n                    name = {robots[i].name}\n                    email = {robots[i].email}\n                    />\n                 )\n              })\n            } \n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n             className='pa3 ba b-green bg-lightest-blue'\n             type='search' \n             placeholder='search robots'\n             onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\n\nexport default ErrorBoundry;","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())  \n}\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        return (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n              { isPending ? <h1 className='tc f1'>Loading...</h1> :\n               <ErrorBoundry>\n                 <CardList robots={filteredRobots}/>\n               </ErrorBoundry>\n              }\n            </Scroll>\n        </div>\n        )\n      }  \n    }\n\n    // 185\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('http://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons'\n\nconst logger = createLogger()\nconst rootReducers = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')) \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}